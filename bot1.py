import telebot
import subprocess
import sys
from requests import post, Session
import time
import datetime
import threading
from urllib.parse import urlparse
import psutil
import tempfile
import random
from gtts import gTTS
import re
import string
import os
from flask import Flask, request
from threading import Lock
import requests
import sqlite3
from telebot import types
from time import strftime
import queue
import pytz
from datetime import timedelta
from keep_alive import keep_alive
keep_alive()
admin_diggory = "ad_an_danhso5" 
name_bot = "TranHao"
ADMIN_ID = '7658079324'
zalo = "0585019743"
web = "https://dichvukey.site/"
facebook = "no"
bot = telebot.TeleBot(os.environ.get('token')) 
print(os.environ.get('token'))  # Ki·ªÉm tra token c√≥ t·ªìn t·∫°i kh√¥ng
print("Bot ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông th√†nh c√¥ng")
users_keys = {}
key = ""
user_cooldown = {}
last_usage = {} 
share_log = []
auto_spam_active = False
last_sms_time = {}
global_lock = Lock()
allowed_users = []
processes = []
ADMIN_ID =  7845889525 #nh·ªõ thay id nh√© n·∫øu k thay k duy·ªát dc vip ƒë√¢u v.L..ong.a
allowed_group_id = -1002311654677
connection = sqlite3.connect('user_data.db')
cursor = connection.cursor()
last_command_time = {}

last_command_timegg = 0

def check_command_cooldown(user_id, command, cooldown):
    current_time = time.time()
    
    if user_id in last_command_time and current_time - last_command_time[user_id].get(command, 0) < cooldown:
        remaining_time = int(cooldown - (current_time - last_command_time[user_id].get(command, 0)))
        return remaining_time
    else:
        last_command_time.setdefault(user_id, {})[command] = current_time
        return None

cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        expiration_time TEXT
    )
''')
connection.commit()

def TimeStamp():
  now = str(datetime.date.today())
  return now

#vLong zz#v
def load_users_from_database():
  cursor.execute('SELECT user_id, expiration_time FROM users')
  rows = cursor.fetchall()
  for row in rows:
    user_id = row[0]
    expiration_time = datetime.datetime.strptime(row[1], '%Y-%m-%d %H:%M:%S')
    if expiration_time > datetime.datetime.now():
      allowed_users.append(user_id)


def save_user_to_database(connection, user_id, expiration_time):
  cursor = connection.cursor()
  cursor.execute(
    '''
        INSERT OR REPLACE INTO users (user_id, expiration_time)
        VALUES (?, ?)
    ''', (user_id, expiration_time.strftime('%Y-%m-%d %H:%M:%S')))
  connection.commit()
###

vietnam_tz = pytz.timezone('Asia/Ho_Chi_Minh')


###
#zalo ...07890416.31

####
start_time = time.time()

@bot.message_handler(commands=['muavip'])
def muavip(message):
    user = message.from_user

    if message.chat.type != "private":
        bot.send_message(message.chat.id, "Vui l√≤ng nh·∫Øn ri√™ng v·ªõi bot ƒë·ªÉ th·ª±c hi·ªán l·ªánh n√†y.\nB·∫£ng gi√°: 1 ng√†y VIP = 1,000 VND, t·ªëi ƒëa 100 ng√†y = 100,000 VND.")
        return

    cooldown = check_command_cooldown(user.id, '/muavip', 5)  
    if cooldown:
        bot.send_message(message.chat.id, f"Vui l√≤ng ch·ªù {cooldown} gi√¢y tr∆∞·ªõc khi th·ª±c hi·ªán l·∫°i l·ªánh n√†y.")
        return

    try:
        so_tien = int(message.text.split()[1])

        if so_tien < 5000 or so_tien > 100000 or so_tien % 1000 != 0:
            bot.send_message(message.chat.id, "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá. M·ªói 1,000 VND t∆∞∆°ng ·ª©ng v·ªõi 1 ng√†y VIP. Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn t·ª´ 5,000 ƒë·∫øn 100,000 VND.")
            return

        full_name = user.first_name if user.first_name else "user"
        letters = ''.join(random.choices(string.ascii_uppercase, k=5))
        digits = ''.join(random.choices(string.digits, k=7))
        random_str = letters + digits
        noidung = f"{full_name} {random_str}"

        message_text = (f"STK: `0123456890`\n"
                        f"Ng√¢n h√†ng: `MBBANK`\n"
                        f"Ch·ªß t√†i kho·∫£n: `TRAN NHAT HAO`\n\n"
                        f"Vui l√≤ng n·∫°p {so_tien} VNƒê theo ƒë√∫ng n·ªôi dung\n"
                        f"N·ªôi Dung: `{noidung}`\n"
                        f"Sau khi n·∫°p h√£y nh·∫•n X√°c Nh·∫≠n\n")

        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("X√°c Nh·∫≠n ‚úÖ", callback_data=f"vip:confirm_{so_tien}_{noidung}_{user.id}"))
        markup.add(types.InlineKeyboardButton("Hu·ª∑ B·ªè ‚ùå", callback_data=f"vip:cancel_{user.id}"))

        bot.send_message(message.chat.id, message_text, reply_markup=markup, parse_mode='Markdown')

    except (IndexError, ValueError):
        bot.send_message(message.chat.id, "Vui l√≤ng nh·∫≠p s·ªë ti·ªÅn c·∫ßn n·∫°p | V√≠ d·ª•: /muavip 100000")
####zalo 0789041631..
@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    data = call.data
    args = data.split("_")

    if args[0] == "vip:confirm":
        so_tien, noidung, user_id = args[1:]
        admin_message = (f"Ng∆∞·ªùi mua VIP: {call.from_user.first_name} (ID: {user_id})\n"
                         f"S·ªë ti·ªÅn: {so_tien} VNƒê\n"
                         f"N·ªôi dung: {noidung}\n"
                         f"Th·ªùi gian n·∫°p: {datetime.datetime.now(vietnam_tz).strftime('%H:%M:%S %d-%m-%Y')}")
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("Duy·ªát ‚úÖ", callback_data=f"vip:approve_{user_id}_{so_tien}"))
        markup.add(types.InlineKeyboardButton("T·ª´ Ch·ªëi ‚ùå", callback_data=f"vip:deny_{user_id}_{so_tien}"))

        bot.send_message(chat_id=8167596347, text=admin_message, reply_markup=markup)
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                              text=f"Y√™u c·∫ßu mua VIP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn qu·∫£n tr·ªã vi√™n üì§\nS·ªë ti·ªÅn: {so_tien} VNƒê\nN·ªôi dung: {noidung}\nNg√†y t·∫°o ƒë∆°n: {datetime.datetime.now(vietnam_tz).strftime('%H:%M:%S %d-%m-%Y')}")

    elif args[0] == "vip:cancel":
        user_id = args[1]
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="B·∫°n ƒë√£ hu·ª∑ b·ªè y√™u c·∫ßu mua VIP.")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif args[0] == "vip:approve":
        user_id, so_tien = args[1:]
        so_ngay_vip = int(so_tien) // 1000
        so_ngay_vip = min(so_ngay_vip, 100)  
        expiration_time = datetime.datetime.now() + datetime.timedelta(days=so_ngay_vip)

        connection = sqlite3.connect('user_data.db')
        save_user_to_database(connection, int(user_id), expiration_time)
        connection.close()

        allowed_users.append(int(user_id))

        bot.send_message(chat_id=user_id, text=f"Ch√∫c m·ª´ng! B·∫°n ƒë√£ tr·ªü th√†nh VIP trong {so_ngay_vip} ng√†y ƒë·∫øn {expiration_time.strftime('%Y-%m-%d %H:%M:%S')}.")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"ƒê√£ duy·ªát y√™u c·∫ßu VIP c·ªßa ID {user_id}.")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

    elif args[0] == "vip:deny":
        user_id, so_tien = args[1:]
        bot.send_message(chat_id=user_id, text="Y√™u c·∫ßu VIP c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi.")
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f"ƒê√£ t·ª´ ch·ªëi y√™u c·∫ßu VIP c·ªßa ID {user_id}.")
        bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)

load_users_from_database()


def fetch_data(user_id):
    try:
        url = f'https://api.ffcommunity.site/info.php?uid={user_id}'
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"Error fetching data: {e}")
        return None

@bot.message_handler(commands=['ff'])
def handle_command(message):
    parts = message.text.split()
    if len(parts) != 2:
        bot.reply_to(message, "<blockquote>S·ª≠ d·ª•ng: /ff ID\nV√≠ d·ª•: /ff 1733997441</blockquote>", parse_mode="HTML")
        return
    
    command, user_id = parts
    if not user_id.isdigit():
        bot.reply_to(message, "<blockquote>ID kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ID s·ªë.</blockquote>", parse_mode="HTML")
        return

    try:
        data = fetch_data(user_id)
        if data is None:
            bot.reply_to(message, "<blockquote>‚ùå Server API ƒëang b·∫£o tr√¨ ho·∫∑c qu√° t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau.</blockquote>", parse_mode="HTML")
            return
            
        basic_info = data
        clan_info = data.get('Guild Information', {})
        leader_info = data.get('Guild Leader Information', {})
        avatar_url = basic_info.get('AccountAvatarId', 'Kh√¥ng c√≥')

        def get_value(key, data_dict):
            return data_dict.get(key, "Kh√¥ng c√≥ th√¥ng tin")

        info_text = f"""
<blockquote>
<b>Th√¥ng tin c∆° b·∫£n:</b>
Avatar: <a href="{avatar_url}">Nh·∫•n ƒë·ªÉ xem</a>
Nickname: {get_value('AccountName', basic_info)}
C·∫•p ƒë·ªô: {get_value('AccountLevel', basic_info)}
Khu v·ª±c: {get_value('AccountRegion', basic_info)}
X·∫øp h·∫°ng Sinh T·ªìn: {get_value('BrRank', basic_info)}
T·ªïng Sao T·ª≠ Chi·∫øn: {get_value('CsRank', basic_info)}
S·ªë l∆∞·ª£t th√≠ch: {get_value('AccountLikes', basic_info)}
L·∫ßn ƒëƒÉng nh·∫≠p g·∫ßn nh·∫•t: {get_value('AccountLastLogin (GMT 0530)', basic_info)}
Ng√¥n ng·ªØ: {get_value('AccountLanguage', basic_info)}
Ti·ªÉu s·ª≠ game: {get_value('AccountSignature', basic_info)}

<b>Th√¥ng tin qu√¢n ƒëo√†n:</b>
T√™n qu√¢n ƒëo√†n: {get_value('GuildName', clan_info)}
C·∫•p ƒë·ªô qu√¢n ƒëo√†n: {get_value('GuildLevel', clan_info)}
S·ª©c ch·ª©a: {get_value('GuildCapacity', clan_info)}
S·ªë th√†nh vi√™n hi·ªán t·∫°i: {get_value('GuildMember', clan_info)}
Ch·ªß qu√¢n ƒëo√†n: {get_value('LeaderName', leader_info)}
C·∫•p ƒë·ªô ch·ªß qu√¢n ƒëo√†n: {get_value('LeaderLevel', leader_info)}
</blockquote>
"""

        bot.reply_to(message, info_text, parse_mode='HTML')

    except Exception as e:
        bot.reply_to(message, "<blockquote>ƒê√£ x·∫£y ra l·ªói</blockquote>", parse_mode="HTML")


@bot.message_handler(commands=['start'])
def send_help(message):
    bot.reply_to(message, """<blockquote>
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó  
     üìå         *DANH S√ÅCH L·ªÜNH*  
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  
 _____________________________________
| /ff : check acc xem th√¥ng tin 
| /tv : chuy·ªÉn ƒë·ªïi ng√¥n ng·ªØ 
| /like : buff like
| /getkey : l·∫•y key 
| /key : nh·∫≠p key
| /uptime : xem video gai xinh
| /spam : spam s·ªë ƒëi·ªán tho·∫°i
|‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
                     L·ªánh Admin
|____________________________
| /muavip
|____________________________
</blockquote>""", parse_mode="HTML")

API_BASE_URL = "https://freefire-virusteam.vercel.app"

def get_vip_key():
    try:
        response = requests.get("https://dichvukey.site/keyvip.txt", timeout=5)
        response.raise_for_status()
        return response.text.strip()
    except requests.exceptions.RequestException:
        return "default-key"  

VIP_KEY = get_vip_key()

region_translation = {
    "VN": "Vi·ªát Nam", "ID": "Indonesia", "TH": "Th√°i Lan",
    "SG": "Singapore", "TW": "ƒê√†i Loan", "EU": "Ch√¢u √Çu",
    "US": "Hoa K·ª≥", "BR": "Brazil", "MX": "Mexico",
    "IN": "·∫§n ƒê·ªô", "KR": "H√†n Qu·ªëc", "PK": "Pakistan",
    "BD": "Bangladesh", "RU": "Nga", "MENA": "Trung ƒê√¥ng & B·∫Øc Phi",
    "LA": "Ch√¢u M·ªπ Latinh"
}

def call_api(endpoint, params=None):
    url = f"{API_BASE_URL}/{endpoint}"
    try:
        response = requests.get(url, params=params, timeout=10)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException:
        return {"status": "error", "message": "Sever qu√° t·∫£i ho·∫∑c l·ªói k·∫øt n·ªëi"}

def check_user_permission(message):
    user_id = message.from_user.id
    today_day = datetime.date.today().day
    key_path = f"./user/{today_day}/{user_id}.txt"

    return user_id in allowed_users or os.path.exists(key_path)

def handle_api_error(message, error_message):
    bot.reply_to(message, f"<blockquote>‚ùå {error_message}</blockquote>", parse_mode="HTML")
####zalo 0789041631
### /like

@bot.message_handler(commands=['spam'])
def spam_vip_handler(message):
    user_id = message.from_user.id
    
    if user_id not in allowed_users:
        bot.reply_to(message, '‚ö†Ô∏è *B·∫°n ch∆∞a c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!* ‚ö†Ô∏è\nüí∞ H√£y mua VIP ƒë·ªÉ s·ª≠ d·ª•ng\nNh·∫Øn /muavip ri√™ng v·ªõi bot @spamsmsvlong_bot.', parse_mode='Markdown')
        return
    params = message.text.split()[1:]
    if len(params) != 2:
        bot.reply_to(message, "‚ùå *Sai c√∫ ph√°p!*\n\n‚úÖ ƒê√∫ng: `/spamvip s·ªë_ƒëi·ªán_tho·∫°i s·ªë_l·∫ßn`", parse_mode='Markdown')
        return

    sdt, count = params

    if not count.isdigit() or int(count) <= 0:
        bot.reply_to(message, "‚ö†Ô∏è *S·ªë l·∫ßn spam kh√¥ng h·ª£p l·ªá!*\nüî¢ Vui l√≤ng nh·∫≠p m·ªôt s·ªë d∆∞∆°ng.", parse_mode='Markdown')
        return

    count = int(count)

    if count > 50:
        bot.reply_to(message, "‚ö†Ô∏è *Gi·ªõi h·∫°n spam!*\n‚è≥ T·ªëi ƒëa l√† 50 l·∫ßn m·ªói l·ªánh.", parse_mode='Markdown')
        return

    if sdt in blacklist:
        bot.reply_to(message, f"üö´ *S·ªë ƒëi·ªán tho·∫°i {sdt} ƒë√£ b·ªã c·∫•m spam!* üö´", parse_mode='Markdown')
        return

    sdt_request = f"84{sdt[1:]}" if sdt.startswith("0") else sdt
    current_time = time.time()
    if user_id in last_usage:
        elapsed_time = current_time - last_usage[user_id]
        if elapsed_time < 100:
            remaining_time = 100 - elapsed_time
            bot.reply_to(message, f"‚è≥ *H√£y ch·ªù {remaining_time:.1f} gi√¢y tr∆∞·ªõc khi d√πng l·∫°i!*", parse_mode='Markdown')
            return

    last_usage[user_id] = current_time

    message_content = f"""
üéØ *Spam Th√†nh C√¥ng!* üéØ
üìå Ng∆∞·ªùi d√πng: @{message.from_user.username}
üì≤ S·ªë ƒëi·ªán tho·∫°i: `{sdt}`
üî¢ S·ªë l·∫ßn spam: `{count}`
‚ö†Ô∏è L∆∞u √Ω: Spam 50 l·∫ßn m·∫•t kho·∫£ng 15 ph√∫t ƒë·ªÉ ho√†n t·∫•t.
üíé G√≥i VIP gi√∫p b·∫°n spam hi·ªáu qu·∫£ h∆°n!
    """

    script_filename = "dec.py"

    try:
        if not os.path.isfile(script_filename):
            bot.reply_to(message, "L·ªói!", parse_mode='Markdown')
            return
        with tempfile.NamedTemporaryFile(delete=False, suffix=".py") as temp_file:
            with open(script_filename, 'r', encoding='utf-8') as file:
                temp_file.write(file.read().encode('utf-8'))
            temp_file_path = temp_file.name

        subprocess.Popen(["python", temp_file_path, sdt, str(count)])

        bot.send_message(message.chat.id, message_content, parse_mode='Markdown')

        requests.get(f'https://dichvukey.site/apivl/call1.php?sdt={sdt_request}')

    except Exception as e:
        print(f'L·ªói')


start_time = time.time()

# Bi·∫øn ƒë·ªÉ t√≠nh to√°n FPS
last_time = time.time()
frame_count = 0
fps = 0

# L·ªánh /uptime
@bot.message_handler(commands=['uptime'])
def uptime(message):
    global last_time, frame_count, fps
    
    # T√≠nh to√°n th·ªùi gian ho·∫°t ƒë·ªông
    uptime_seconds = int(time.time() - start_time)
    uptime_formatted = str(timedelta(seconds=uptime_seconds))
    
    # C·∫≠p nh·∫≠t FPS m·ªói khi l·ªánh ƒë∆∞·ª£c x·ª≠ l√Ω
    current_time = time.time()
    frame_count += 1
    if current_time - last_time >= 1:  # T√≠nh FPS m·ªói gi√¢y
        fps = frame_count
        frame_count = 0
        last_time = current_time
    
    # G·ª≠i video t·ª´ API
    video_url = "https://api.ffcommunity.site/randomvideo.php"
    video_response = requests.get(video_url)
    
    # Ph√¢n t√≠ch d·ªØ li·ªáu JSON v√† l·∫•y ƒë∆∞·ªùng d·∫´n video (ch√∫ √Ω ƒë·∫øn ph·∫ßn https)
    try:
        video_data = video_response.json()  # Ph√¢n t√≠ch JSON
        video_link = video_data.get('url', '')  # L·∫•y ƒë∆∞·ªùng d·∫´n video t·ª´ tr∆∞·ªùng 'url'
        
        # Ki·ªÉm tra n·∫øu c√≥ https
        if video_link and (video_link.startswith('http://')or video_link.startswith('https://')):
            video_link = video_link.strip()  # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a ·ªü ƒë·∫ßu v√† cu·ªëi
        else:
            video_link = 'Kh√¥ng th·ªÉ l·∫•y video'

    except ValueError:
        video_link = 'Kh√¥ng th·ªÉ l·∫•y video'

    # T·∫°o v√† g·ª≠i tin nh·∫Øn
    bot.send_message(message.chat.id, 
                     f"üìä ‚è≥ Bot ƒë√£ ho·∫°t ƒë·ªông: {uptime_formatted}\n"
                     f"üéÆ FPS trung b√¨nh: {fps} FPS\n"
                     "Kh√¥ng th·ªÉ l·∫•y th√¥ng tin c·∫•u h√¨nh.\n"
                     f"üé• Video gi·∫£i tr√≠ cho ae FA vibu ƒë√¢y! üòè\n{video_link}")
                     


    API_LIKE_URL = "https://dichvukey.site/addlike.php?uid={}"  # API tƒÉng like UID FF

def add_like(uid):
    url = API_LIKE_URL.format(uid)
    try:
        response = requests.get(url, timeout=5)
        response.raise_for_status()
        data = response.json()
        
        if data.get("status") == 400:
            return f"‚ùå L·ªói t·ª´ API: {data.get('message', 'Kh√¥ng th·ªÉ tƒÉng like')}"
        
        return f"‚úÖ ƒê√£ g·ª≠i y√™u c·∫ßu tƒÉng like cho UID {uid}!"
    except requests.exceptions.RequestException as e:
        return f"‚ùå L·ªói k·∫øt n·ªëi API: {str(e)}"
    except Exception as e:
        return f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"

        reply_text = (
            f"\nüë§ T√™n: {data.get('username', 'Kh√¥ng x√°c ƒë·ªãnh')}\n"
            f"üÜî UID: {data.get('uid', 'Kh√¥ng x√°c ƒë·ªãnh')}\n"
            f"‚ù§Ô∏è Like hi·ªán t·∫°i: {data.get('current_likes', 'N/A')}\n"
            f"üëç Like ƒë√£ th√™m: {data.get('added_likes', 'N/A')}\n"
            f"üìÖ Ng√†y h·∫øt h·∫°n: {data.get('expiry_date', 'N/A')}"
        )
        return reply_text
    return "L·ªói kh√¥ng x√°c ƒë·ªãnh."

@bot.message_handler(commands=['like'])
def like_command(message):
    try:
        uid = message.text.split()[1]
        if not uid.isdigit():
            bot.reply_to(message, "‚ö† UID ph·∫£i l√† s·ªë!")
            return
        bot.reply_to(message, "üëç ƒêang tƒÉng like cho UID...")
        result = add_like(uid)
        bot.reply_to(message, result)
    except IndexError:
        bot.reply_to(message, "‚ö† Vui l√≤ng nh·∫≠p UID sau l·ªánh /like")
    except Exception as e:
        bot.reply_to(message, f"‚ùå L·ªói: {str(e)}")

@bot.message_handler(commands=['getkey'])
def startkey(message):
    user_id = message.from_user.id
    today_day = datetime.date.today().day
    key = "HaoEsport" + str(user_id * today_day - 2007)

    api_token = '67c1fe72a448b83a9c7e7340'
    key_url = f"https://dichvukey.site/key.html?key={key}"

    try:
        response = requests.get(f'https://link4m.co/api-shorten/v2?api={api_token}&url={key_url}')
        response.raise_for_status()
        url_data = response.json()
        print(key)

        if 'shortenedUrl' in url_data:
            url_key = url_data['shortenedUrl']
            text = (f'Link L·∫•y Key Ng√†y {TimeStamp()} L√Ä: {url_key}\n'
                    'KHI L·∫§Y KEY XONG, D√ôNG L·ªÜNH /key HaoEsport ƒê·ªÇ TI·∫æP T·ª§C Ho·∫∑c /muavip ƒë·ª° v∆∞·ª£t t·ªën th·ªùi gian nh√©')
            bot.reply_to(message, text)
        else:
            bot.reply_to(message, 'L·ªói.')
    except requests.RequestException:
        bot.reply_to(message, 'L·ªói.')

@bot.message_handler(commands=['key'])
def key(message):
    if len(message.text.split()) != 2:
        bot.reply_to(message, 'Key ƒê√£ V∆∞·ª£t L√†? ƒë√£ v∆∞·ª£t th√¨ nh·∫≠p /key ch∆∞a v∆∞·ª£t th√¨ /muavip nh√©')
        return

    user_id = message.from_user.id
    key = message.text.split()[1]
    today_day = datetime.date.today().day
    expected_key = "HaoEsport" + str(user_id * today_day - 2007)  # ƒê·∫£m b·∫£o c√¥ng th·ª©c kh·ªõp v·ªõi c√¥ng th·ª©c t·∫°o key

    if key == expected_key:
        text_message = f'<blockquote>[ KEY H·ª¢P L·ªÜ ] NG∆Ø·ªúI D√ôNG C√ì ID: [ {user_id} ] ƒê∆Ø·ª¢C PH√âP ƒê∆Ø·ª¢C S·ª¨ D·ª§NG C√ÅC L·ªÜNH TRONG [/start]</blockquote>'
        video_url = 'https://v16m-default.akamaized.net/8c4208955e22e46d82f245894d6d3e31/67e53e48/video/tos/alisg/tos-alisg-pve-0037c001/okvpfADKBSYBbFRXn1fOjQQEgIDrBxoEIrn0Eq/?a=0&bti=OUBzOTg7QGo6OjZA'  # ƒê·ªïi URL ƒë·∫øn video c·ªßa b·∫°n
        bot.send_video(message.chat.id, video_url, caption=text_message, parse_mode='HTML')
        
        user_path = f'./user/{today_day}'
        os.makedirs(user_path, exist_ok=True)
        with open(f'{user_path}/{user_id}.txt', "w") as fi:
            fi.write("")
    else:
        bot.reply_to(message, 'KEY KH√îNG H·ª¢P L·ªÜ.')

@bot.message_handler(commands=['tv'])
def tieng_viet(message):
    chat_id = message.chat.id
    keyboard = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton("Ti·∫øng Vi·ªát üáªüá≥", url='https://t.me/setlanguage/vi')
    keyboard.add(url_button)
    bot.send_message(chat_id, '<blockquote>Click v√†o n√∫t "<b>Ti·∫øng Vi·ªát</b>" ƒë·ªÉ ƒë·ªïi ng√¥n ng·ªØ sang Ti·∫øng Vi·ªát üáªüá≥</blockquote>', reply_markup=keyboard, parse_mode='HTML')
######


if __name__ == "__main__":
    bot_active = True
    bot.polling()  #
